DROP DATABASE jewel_db;
CREATE DATABASE jewel_db;
USE jewel_db;
DROP TABLE IF EXISTS JWL_USER;
CREATE TABLE JWL_USER(
	USER_ID SMALLINT(5) NOT NULL AUTO_INCREMENT,
	NAME VARCHAR(30),
	USERNAME VARCHAR(30),
	PASSWORD VARCHAR(30),
	MOBILE BIGINT(10),
	ADDRESS VARCHAR(255),
	INSTOCK_WEIGHT FLOAT(10,5) DEFAULT '0.00000',\
	OUTSTOCK_WEIGHT FLOAT(10,5) DEFAULT '0.00000',
	TOTAL_RECEIVED_AMOUNT FLOAT(10,5) DEFAULT '0.00000',
	USER_TYPE TINYINT(2),
	IS_GS TINYINT(1) DEFAULT 0,
	IS_DEL TINYINT(1) DEFAULT 0,
	CREATED_ON TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	CREATED_BY VARCHAR(30),
	UPDATED_ON TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	UPDATED_BY VARCHAR(30),
	CONSTRAINT JWL_USER_ID_PK PRIMARY KEY (USER_ID),
	CONSTRAINT JWL_USER_USERNAME UNIQUE (USERNAME)
	
)ENGINE=InnoDB DEFAULT CHARSET=utf8;
CREATE INDEX IDX_MOBILE ON JWL_USER(MOBILE); 

INSERT INTO JWL_USER(NAME,USERNAME,PASSWORD,MOBILE,ADDRESS,USER_TYPE,CREATED_BY,UPDATED_BY)
VALUES('DURGA','7502434654','12345',7502434654,'NO.1, MAIN STREET, MAYILADUTHURAI, NAGAPATTINAM-6033333',1,'OWNER','OWNER');
INSERT INTO JWL_USER(NAME,USERNAME,PASSWORD,MOBILE,ADDRESS,USER_TYPE,CREATED_BY,UPDATED_BY)
VALUES('Admin','admin','12345',7502434654,'NO.1, MAIN STREET, MAYILADUTHURAI, NAGAPATTINAM-6033333',1,'OWNER','OWNER');
INSERT INTO JWL_USER(NAME,USERNAME,PASSWORD,MOBILE,ADDRESS,USER_TYPE,CREATED_BY,UPDATED_BY)
VALUES('Admin','test','test',7502434654,'NO.1, MAIN STREET, MAYILADUTHURAI, NAGAPATTINAM-6033333',1,'OWNER','OWNER');

CREATE TABLE JWL_STOCK(
	STOCK_ID TINYINT(1) NOT NULL,
	MATERIAL_TYPE TINYINT(1) DEFAULT 1,
	INSTOCK_WEIGHT FLOAT(10,5) DEFAULT '0.00000',
	OUTSTOCK_WEIGHT FLOAT(10,5) DEFAULT '0.00000',
	RECEIVED_WEIGHT FLOAT(10,2) DEFAULT '0.00',
	IS_DEL TINYINT(1) DEFAULT 0,
	CREATED_ON TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	CREATED_BY VARCHAR(30),
	UPDATED_ON TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	UPDATED_BY VARCHAR(30),
	CONSTRAINT JWL_STOCK_ID_PK PRIMARY KEY (STOCK_ID)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;

INSERT INTO JWL_STOCK(STOCK_ID, CREATED_BY, UPDATED_BY) VALUES(1, 'OWNER','OWNER');
CREATE TABLE JWL_STOCK_HIS(
	STOCK_HIS_ID BIGINT(10) NOT NULL AUTO_INCREMENT,
	STOCK_TYPE_ID TINYINT(1) DEFAULT 1,
	USER_ID SMALLINT(3) NOT NULL DEFAULT 1,
	WEIGHT FLOAT(10,5) DEFAULT '0.00000',
	ORDER_ID BIGINT(10) NULL,
	IS_DEL TINYINT(1) DEFAULT 0,
	CREATED_ON TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	CREATED_BY VARCHAR(30),
	UPDATED_ON TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	UPDATED_BY VARCHAR(30),
	CONSTRAINT JWL_STOCK_HIS_ID_PK PRIMARY KEY (STOCK_HIS_ID)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;
CREATE INDEX IDX_STOCK_CREATED_ON ON JWL_STOCK_HIS(CREATED_ON);

CREATE TABLE JWL_ORDER(
	ORDER_ID BIGINT(10) NOT NULL AUTO_INCREMENT,
	ORDER_NO VARCHAR(15) NOT NULL,
	ORDER_SHORT_NO VARCHAR(5) NULL,
	NAME VARCHAR(50),
	MOBILE BIGINT(10),
	ADDRESS VARCHAR(255),
	ORDER_TYPE TINYINT(1) DEFAULT 0,
	MATERIAL_TYPE TINYINT(1) DEFAULT 1,
	ITEM_TYPE VARCHAR(255),
	RATE FLOAT(10,2) DEFAULT 0.00,
	WEIGHT FLOAT(10,5) DEFAULT '0.00000',
	WASTAGE_WEIGHT FLOAT(10,5) DEFAULT '0.00000',
	VAT FLOAT(10,5) DEFAULT '0.00000',
	PURCHASE_AMT FLOAT(10,2) DEFAULT '0.00',
	GST_AMT FLOAT(10,2) DEFAULT '0.00',
	PAYMENT_MODE TINYINT(3) DEFAULT 1,
	ADVANCE_AMT FLOAT(10,2) DEFAULT '0.00',
	WAGES_AMT FLOAT(10,2) DEFAULT '0.00',
	MAKING_AMT FLOAT(10,2) DEFAULT '0.00',
	DISCOUNT_AMT FLOAT(10,2) DEFAULT '0.00',
	OLD_MATERIAL_TYPE TINYINT(1) DEFAULT 1,	
	OLD_ITEM_TYPE VARCHAR(255),
	OLD_RATE FLOAT(10,2) DEFAULT 0.00,
	OLD_WEIGHT FLOAT(10,5) DEFAULT '0.00000',
	OLD_ITEM_AMT FLOAT(10,2) DEFAULT '0.00',
	EXPECTED_ON TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	DELIVERED_ON TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	STATUS TINYINT(1) DEFAULT 1,
	IS_DEL TINYINT(1) DEFAULT 0,
	GOLDSMITH_USER_ID SMALLINT(5) NULL,
	CREATED_ON TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	CREATED_BY VARCHAR(30),
	UPDATED_ON TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	UPDATED_BY VARCHAR(30),
	CONSTRAINT JWL_ORDER_ID_PK PRIMARY KEY (ORDER_ID)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;
CREATE INDEX IDX_ORDER_NO ON JWL_ORDER(ORDER_NO);
CREATE INDEX IDX_ORDER_NAME ON JWL_ORDER(NAME);
CREATE INDEX IDX_ORDER_MOBILE ON JWL_ORDER(MOBILE); 
CREATE INDEX IDX_ORDER_CREATED_ON ON JWL_ORDER(CREATED_ON); 

CREATE TABLE JWL_ACTION_TYPE(
	ACTION_TYPE_ID TINYINT(1) NOT NULL,
	ACTION_TYPE VARCHAR(50)NOT NULL,
	CONSTRAINT JWL_JWL_ACTION_TYPE_ID_PK PRIMARY KEY (ACTION_TYPE_ID)
);
INSERT INTO JWL_ACTION_TYPE VALUES(1, 'NEW ORDER PLACED');
INSERT INTO JWL_ACTION_TYPE VALUES(2, 'ORDER ASSIGNED TO GOLDSMITH');
INSERT INTO JWL_ACTION_TYPE VALUES(3, 'ADVANCE AMOUNT');
INSERT INTO JWL_ACTION_TYPE VALUES(4, 'ORDER ITEM RECEIVED FROM GOLDSMITH');
INSERT INTO JWL_ACTION_TYPE VALUES(5, 'WAGES');
INSERT INTO JWL_ACTION_TYPE VALUES(6, 'GOLD SMITH PAYMENT');
INSERT INTO JWL_ACTION_TYPE VALUES(7, 'ORDER COMPLETED');
INSERT INTO JWL_ACTION_TYPE VALUES(8, 'ORDER HOLD');
INSERT INTO JWL_ACTION_TYPE VALUES(9, 'ORDER CANCELLED');

CREATE TABLE JWL_ORDER_TRACK(
	ORDER_TRACK_ID BIGINT(10) NOT NULL AUTO_INCREMENT,
	ORDER_ID BIGINT(10) NOT NULL,
	WAGES_NAME VARCHAR(50),
	ACTION_TYPE_ID TINYINT(3) NOT NULL,
	CONTENT VARCHAR(255),
	RATE FLOAT(10,2) DEFAULT 0.00,
	WEIGHT FLOAT(10,5) DEFAULT '0.00000',
	AMOUNT_TYPE TINYINT(1) DEFAULT 0,
	AMOUNT FLOAT(10,2) DEFAULT '0.00',
	PAYMENT_MODE TINYINT(3) DEFAULT 1,
	IS_DEL TINYINT(1) DEFAULT 0,
	GOLDSMITH_USER_ID SMALLINT(5) NULL,
	CREATED_ON TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	CREATED_BY VARCHAR(30),
	UPDATED_ON TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	UPDATED_BY VARCHAR(30),
	CONSTRAINT JWL_ORDER_ID_PK PRIMARY KEY (ORDER_TRACK_ID),
	CONSTRAINT JWL_TRACK_ACTION_TYPE_ID_FK FOREIGN KEY (ACTION_TYPE_ID)
	REFERENCES JWL_ACTION_TYPE(ACTION_TYPE_ID),
	CONSTRAINT JWL_TRACK_ORDER_ID_FK FOREIGN KEY (ORDER_ID)
	REFERENCES JWL_ORDER(ORDER_ID)
)ENGINE=InnoDB DEFAULT CHARSET=utf8;
CREATE INDEX IDX_ORDER_TRACK_CREATED_ON ON JWL_ORDER_TRACK(CREATED_ON); 

DROP TRIGGER TGR_UPDATE_STOCK;
DELIMITER $$

CREATE TRIGGER `TGR_UPDATE_STOCK` AFTER INSERT ON `JWL_STOCK_HIS` 
    FOR EACH ROW 
BEGIN
   DECLARE existInStockWeight FLOAT(10,2) DEFAULT 0.00;
   DECLARE existOutStockWeight FLOAT(10,2) DEFAULT 0.00;
   
   DECLARE existUserInStockWeight FLOAT(10,2) DEFAULT 0.00;
   DECLARE existUserOutStockWeight FLOAT(10,2) DEFAULT 0.00;
   DECLARE existReceivedWeight FLOAT(10,2) DEFAULT 0.00;
   SELECT INSTOCK_WEIGHT,OUTSTOCK_WEIGHT,RECEIVED_WEIGHT into existInStockWeight,existOutStockWeight,existReceivedWeight FROM JWL_STOCK;
   SELECT INSTOCK_WEIGHT,OUTSTOCK_WEIGHT into existUserInStockWeight,existUserOutStockWeight FROM JWL_USER WHERE USER_ID = NEW.USER_ID;
	IF NEW.STOCK_TYPE_ID =1 THEN
		UPDATE JWL_STOCK SET INSTOCK_WEIGHT = NEW.WEIGHT + existInStockWeight;
	ELSEIF NEW.STOCK_TYPE_ID =2 THEN
		UPDATE JWL_STOCK SET OUTSTOCK_WEIGHT = NEW.WEIGHT + existOutStockWeight, INSTOCK_WEIGHT=existInStockWeight-NEW.WEIGHT;
		UPDATE JWL_USER SET INSTOCK_WEIGHT =  NEW.WEIGHT + existUserInStockWeight WHERE USER_ID = NEW.USER_ID;
	ELSEIF NEW.STOCK_TYPE_ID =3 THEN
		UPDATE JWL_STOCK SET RECEIVED_WEIGHT = NEW.WEIGHT + existReceivedWeight, OUTSTOCK_WEIGHT=existOutStockWeight-NEW.WEIGHT;
		UPDATE JWL_USER SET INSTOCK_WEIGHT = existUserInStockWeight-NEW.WEIGHT, OUTSTOCK_WEIGHT =  NEW.WEIGHT + existUserOutStockWeight WHERE USER_ID = NEW.USER_ID;
	END IF;  
END;
$$

DROP TRIGGER TGR_UPDATE_ORDER_STOCK;
DELIMITER $$

CREATE TRIGGER `TGR_UPDATE_ORDER_STOCK` AFTER INSERT ON `JWL_ORDER_TRACK` 
    FOR EACH ROW 
BEGIN
   DECLARE existAdvanceAmount FLOAT(10,2) DEFAULT 0.00;
   DECLARE existInStockWeight FLOAT(10,2) DEFAULT 0.00;
   DECLARE existOutStockWeight FLOAT(10,2) DEFAULT 0.00;
   DECLARE existReceivedWeight FLOAT(10,2) DEFAULT 0.00;
   
   DECLARE existGsmithInStockWeight FLOAT(10,2) DEFAULT 0.00;
   DECLARE existGsmithOutStockWeight FLOAT(10,2) DEFAULT 0.00;
   DECLARE totalReceivedAmount FLOAT(10,5) DEFAULT 0.00;
   DECLARE existWagesAmount FLOAT(10,2) DEFAULT 0.00;
   DECLARE existMakingAmount FLOAT(10,2) DEFAULT 0.00;
   DECLARE orderType TINYINT(1) DEFAULT 0;
   DECLARE orderNumber VARCHAR(15);
   DECLARE goldSmithUserId SMALLINT(5);
   
   SELECT ORDER_TYPE,ADVANCE_AMT,WAGES_AMT,MAKING_AMT, GOLDSMITH_USER_ID,ORDER_NO INTO orderType,existAdvanceAmount,existWagesAmount,existMakingAmount,goldSmithUserId,orderNumber FROM JWL_ORDER WHERE ORDER_ID=NEW.ORDER_ID;
   
   SELECT INSTOCK_WEIGHT,OUTSTOCK_WEIGHT,RECEIVED_WEIGHT into existInStockWeight,existOutStockWeight,existReceivedWeight FROM JWL_STOCK;
   
   SELECT INSTOCK_WEIGHT,OUTSTOCK_WEIGHT,TOTAL_RECEIVED_AMOUNT into existGsmithInStockWeight,existGsmithOutStockWeight,totalReceivedAmount FROM JWL_USER WHERE USER_ID = goldSmithUserId;
   
   
   IF orderNumber IS NOT NULL THEN 
		UPDATE JWL_ORDER SET ORDER_NO = CONCAT((CURDATE() + 0), 100+NEW.ORDER_ID), ORDER_SHORT_NO = 100+NEW.ORDER_ID WHERE ORDER_ID=NEW.ORDER_ID;
   END IF;
   IF NEW.ACTION_TYPE_ID =3 THEN
     UPDATE JWL_ORDER SET ADVANCE_AMT = existAdvanceAmount + NEW.AMOUNT WHERE ORDER_ID=NEW.ORDER_ID;
   ELSEIF NEW.ACTION_TYPE_ID =4 THEN
     UPDATE JWL_USER SET INSTOCK_WEIGHT = existGsmithInStockWeight - NEW.WEIGHT,
	 OUTSTOCK_WEIGHT = existGsmithOutStockWeight + NEW.WEIGHT WHERE USER_ID = goldSmithUserId;
	 INSERT INTO JWL_STOCK_HIS (USER_ID,STOCK_TYPE_ID,WEIGHT,ORDER_ID) VALUES (goldSmithUserId,3,NEW.WEIGHT,NEW.ORDER_ID);
	 UPDATE JWL_ORDER SET STATUS = 3 WHERE ORDER_ID=NEW.ORDER_ID;
   ELSEIF NEW.ACTION_TYPE_ID =5 THEN
 	 UPDATE JWL_ORDER SET WAGES_AMT = existWagesAmount + NEW.AMOUNT WHERE ORDER_ID=NEW.ORDER_ID;
   ELSEIF NEW.ACTION_TYPE_ID =6 THEN
 	 UPDATE JWL_ORDER SET MAKING_AMT = NEW.AMOUNT WHERE ORDER_ID=NEW.ORDER_ID;
	 UPDATE JWL_USER SET TOTAL_RECEIVED_AMOUNT = totalReceivedAmount + NEW.AMOUNT WHERE USER_ID=goldSmithUserId;
   ELSEIF NEW.ACTION_TYPE_ID =8 THEN
	 UPDATE JWL_ORDER SET STATUS = 6 WHERE ORDER_ID=NEW.ORDER_ID;
   ELSEIF NEW.ACTION_TYPE_ID =9 THEN
     UPDATE JWL_ORDER SET STATUS = 7 WHERE ORDER_ID=NEW.ORDER_ID;
   END IF;
END;
$$